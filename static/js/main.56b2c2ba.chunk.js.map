{"version":3,"sources":["components/Header.js","components/Draggy.js","components/Info.js","components/ContactMe.js","App.js","serviceWorker.js","index.js","logo.svg","assets/images/Asset4.svg"],"names":["Header","className","src","logo","alt","Draggy","React","Component","Info","Container","Row","Col","me","strings","typeSpeed","ContactMe","onSubmit","e","preventDefault","emailjs","sendForm","target","then","result","console","log","text","error","type","name","value","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"8PAEe,SAASA,IACtB,OACE,6BACE,4BAAQC,UAAU,cAChB,sDACA,yBAAKA,UAAU,WAAWC,IAAKC,IAAMC,IAAI,W,qHCQlCC,E,iLAVX,OACE,kBAAC,IAAD,KACE,6BACE,wBAAIJ,UAAU,UAAd,kD,GALWK,IAAMC,WCEZ,SAASC,IACtB,OACE,yBAAKP,UAAU,QACb,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAKT,IAAKU,IAAIR,IAAI,UAEpB,kBAACO,EAAA,EAAD,CAAKV,UAAU,gBACb,kBAAC,IAAD,CACEY,QAAS,CACP,6BACA,mCACA,gCACA,aAEFC,UAAW,KAGb,kBAAC,EAAD,U,2BCnBG,SAASC,IAqBtB,OACE,0BAAMd,UAAU,eAAee,SArBjC,SAAmBC,GACjBA,EAAEC,iBAEFC,IACGC,SACC,QACA,oBACAH,EAAEI,OACF,8BAEDC,MACC,SAAAC,GACEC,QAAQC,IAAIF,EAAOG,SAErB,SAAAC,GACEH,QAAQC,IAAIE,EAAMD,WAOtB,2BAAOE,KAAK,SAASC,KAAK,mBAC1B,uCACA,2BAAOD,KAAK,OAAOC,KAAK,cACxB,wCACA,2BAAOD,KAAK,QAAQC,KAAK,eACzB,0CACA,8BAAUA,KAAK,YACf,2BAAOD,KAAK,SAASE,MAAM,UCnBlBC,MAVf,WACE,OACE,yBAAK9B,UAAU,OACb,kBAACD,EAAD,MACA,kBAACe,EAAD,MACA,kBAACP,EAAD,QCCcwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.56b2c2ba.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"../logo.svg\";\nexport default function Header() {\n  return (\n    <div>\n      <header className=\"App-header\">\n        <p>Welcome to my portfolio</p>\n        <img className=\"App-logo\" src={logo} alt=\"logo\" />\n      </header>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Draggable from \"react-draggable\";\n\nclass Draggy extends React.Component {\n  render() {\n    return (\n      <Draggable>\n        <div>\n          <h3 className=\"draggy\">Dont try to drag this around the screen!</h3>\n        </div>\n      </Draggable>\n    );\n  }\n}\n\nexport default Draggy;\n","import React from \"react\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\nimport me from \"../assets/images/Asset4.svg\";\nimport Typed from \"react-typed\";\nimport Draggy from \"./Draggy\";\nexport default function Info() {\n  return (\n    <div className=\"info\">\n      <Container>\n        <Row>\n          <Col>\n            <img src={me} alt=\"logo\" />\n          </Col>\n          <Col className=\"hacked-typed\">\n            <Typed\n              strings={[\n                \"Here you can find anything\",\n                \"Maybe youll find a new developer\",\n                \"Maybe you'll find inspiration\",\n                \"Maybe not\"\n              ]}\n              typeSpeed={40}\n            />\n\n            <Draggy />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","import React from \"react\";\nimport emailjs from \"emailjs-com\";\n\n// import \"./ContactMe.css\";\n\nexport default function ContactMe() {\n  function sendEmail(e) {\n    e.preventDefault();\n\n    emailjs\n      .sendForm(\n        \"gmail\",\n        \"template_FItNXuhV\",\n        e.target,\n        \"user_zkrkKUslJ8c2jKFHucWXR\"\n      )\n      .then(\n        result => {\n          console.log(result.text);\n        },\n        error => {\n          console.log(error.text);\n        }\n      );\n  }\n\n  return (\n    <form className=\"contact-form\" onSubmit={sendEmail}>\n      <input type=\"hidden\" name=\"contact_number\" />\n      <label>Name</label>\n      <input type=\"text\" name=\"user_name\" />\n      <label>Email</label>\n      <input type=\"email\" name=\"user_email\" />\n      <label>Message</label>\n      <textarea name=\"message\" />\n      <input type=\"submit\" value=\"Send\" />\n    </form>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Info from \"./components/Info\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ContactMe from \"./components/ContactMe\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <ContactMe></ContactMe>\n      <Info />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/Asset4.9c4e1d80.svg\";"],"sourceRoot":""}